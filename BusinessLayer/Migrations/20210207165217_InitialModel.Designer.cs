// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBase.BusinessLayer.Persistence;

namespace SmartBase.BusinessLayer.Migrations
{
    [DbContext(typeof(SmartAccountContext))]
    [Migration("20210207165217_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.AccountMaster", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Closing")
                        .HasColumnType("money");

                    b.Property<decimal?>("CurCr")
                        .HasColumnType("money");

                    b.Property<decimal?>("CurDr")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Opening")
                        .HasColumnType("money");

                    b.HasKey("CompCode", "AccYear", "AccountId")
                        .HasName("PK_AccountMaster");

                    b.ToTable("AccountMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.BillDetail", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("BillId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<int>("ItemSr")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("VouNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("CompCode", "AccYear", "BillId", "ItemSr")
                        .HasName("PK_BillDetail");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.BillMaster", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("BillId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Adjusted")
                        .HasColumnType("money");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("date");

                    b.HasKey("CompCode", "AccYear", "BillId")
                        .HasName("PK_BillMaster");

                    b.ToTable("BillMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.CgstMaster", b =>
                {
                    b.Property<int>("CgstId")
                        .HasColumnType("int");

                    b.Property<string>("CgstDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CgstRate")
                        .HasColumnType("money");

                    b.HasKey("CgstId")
                        .HasName("PK_CgstMaster");

                    b.ToTable("CgstMaster");

                    b.HasData(
                        new
                        {
                            CgstId = 1,
                            CgstDetail = "CGST-1.50%-SALES.",
                            CgstRate = 1.5m
                        },
                        new
                        {
                            CgstId = 51,
                            CgstDetail = "CGST-9%GOODS-MATERIAL PURCHASE",
                            CgstRate = 9m
                        },
                        new
                        {
                            CgstId = 53,
                            CgstDetail = "CGST-1.5% GOODS-MATERIAL PURCHA",
                            CgstRate = 1.5m
                        },
                        new
                        {
                            CgstId = 55,
                            CgstDetail = "CGST-9%-SERVICE-LABOUR CHARGES",
                            CgstRate = 9m
                        },
                        new
                        {
                            CgstId = 57,
                            CgstDetail = "CGST-6%-SERVICE-LABOUR CHARGES",
                            CgstRate = 6m
                        },
                        new
                        {
                            CgstId = 59,
                            CgstDetail = "CGST-2.5%SERVICE-LABOUR CHARGE",
                            CgstRate = 2.5m
                        },
                        new
                        {
                            CgstId = 61,
                            CgstDetail = "CGST-14%GOODS-MATERIAL PURCHAS",
                            CgstRate = 14m
                        },
                        new
                        {
                            CgstId = 63,
                            CgstDetail = "CGST-6%GOODS-MATERIAL PURCHASE",
                            CgstRate = 6m
                        },
                        new
                        {
                            CgstId = 65,
                            CgstDetail = "CGST-2.5%GOODS-MATERIAL PURCHA",
                            CgstRate = 2.5m
                        },
                        new
                        {
                            CgstId = 66,
                            CgstDetail = "CGST-0.125%GOODS-MATERIAL PURC",
                            CgstRate = 0.12m
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.CompInfo", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("AutoVoucher")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("BillMatch")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("YearBegin")
                        .HasColumnType("date");

                    b.Property<DateTime>("YearEnd")
                        .HasColumnType("date");

                    b.HasKey("CompCode", "AccYear")
                        .HasName("PK_CompInfo");

                    b.ToTable("CompInfo");

                    b.HasData(
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            Address = "Company Address",
                            AutoVoucher = "Y",
                            BillMatch = "Y",
                            Name = "Default Company",
                            TaxId = "G.S.T.Number",
                            YearBegin = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YearEnd = new DateTime(2020, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.IgstMaster", b =>
                {
                    b.Property<int>("IgstId")
                        .HasColumnType("int");

                    b.Property<string>("IgstDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("IgstRate")
                        .HasColumnType("money");

                    b.HasKey("IgstId")
                        .HasName("PK_IgstMaster");

                    b.ToTable("IgstMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.Ledger", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("VouNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("ItemSr")
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("BilChq")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("CorrAccountId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("DrCr")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("TrxType")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("VouDate")
                        .HasColumnType("date");

                    b.Property<string>("VouDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("CompCode", "AccYear", "VouNo", "ItemSr")
                        .HasName("PK_Ledger");

                    b.ToTable("Ledger");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.SgstMaster", b =>
                {
                    b.Property<int>("SgstId")
                        .HasColumnType("int");

                    b.Property<string>("SgstDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SgstRate")
                        .HasColumnType("money");

                    b.HasKey("SgstId")
                        .HasName("PK_SgstMaster");

                    b.ToTable("SgstMaster");

                    b.HasData(
                        new
                        {
                            SgstId = 2,
                            SgstDetail = "SGST-1.50%-SALES.",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 52,
                            SgstDetail = "SGST-9%GOODS-MATERIAL PURCHASE",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 54,
                            SgstDetail = "SGST-1.5%GOODS-MATERIAL PURCHA",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 56,
                            SgstDetail = "SGST-9%-SERVICE-LABOUR CHARGES",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 58,
                            SgstDetail = "SGST-6%-SERVICE-LABOUR CHARGES",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 60,
                            SgstDetail = "SGST-2.5%SERVICE-LABOUR CHARGE",
                            SgstRate = 1.5m
                        },
                        new
                        {
                            SgstId = 62,
                            SgstDetail = "SGST-14%GOODS-MATERIAL PURCHAS",
                            SgstRate = 14m
                        },
                        new
                        {
                            SgstId = 64,
                            SgstDetail = "SGST-6%GOODS-MATERIAL PURCHASE",
                            SgstRate = 6m
                        },
                        new
                        {
                            SgstId = 66,
                            SgstDetail = "SGST-2.5%GOODS-MATERIAL PURCHA",
                            SgstRate = 2.5m
                        },
                        new
                        {
                            SgstId = 67,
                            SgstDetail = "SGST-.125%GOODS-MATERIAL PURCH",
                            SgstRate = 0.12m
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.TransactionMaster", b =>
                {
                    b.Property<string>("TrxId")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId1")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId2")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId3")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("TrxDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TrxId")
                        .HasName("PK_TransactionMaster");

                    b.ToTable("TransactionMaster");

                    b.HasData(
                        new
                        {
                            TrxId = "A",
                            AccountId1 = "503",
                            AccountId2 = "604",
                            DrCr = "1",
                            TrxDetail = "BANK RECEIPTS"
                        },
                        new
                        {
                            TrxId = "B",
                            AccountId1 = "605",
                            AccountId2 = "503",
                            AccountId3 = "604",
                            DrCr = "2",
                            TrxDetail = "BANK PAYMENTS"
                        },
                        new
                        {
                            TrxId = "C",
                            AccountId1 = "605",
                            AccountId2 = "503",
                            AccountId3 = "604",
                            DrCr = "2",
                            TrxDetail = "CASH PAYMENTS"
                        },
                        new
                        {
                            TrxId = "D",
                            AccountId1 = "605",
                            AccountId2 = "503",
                            AccountId3 = "604",
                            DrCr = "1",
                            TrxDetail = "CASH RECEIPTS"
                        },
                        new
                        {
                            TrxId = "S",
                            AccountId1 = "60302",
                            AccountId2 = "50501",
                            AccountId3 = "604",
                            DrCr = "1",
                            TrxDetail = "SALES"
                        },
                        new
                        {
                            TrxId = "P",
                            AccountId1 = "50501",
                            AccountId2 = "60302",
                            DrCr = "2",
                            TrxDetail = "PURCHASES"
                        },
                        new
                        {
                            TrxId = "N",
                            AccountId1 = "60302",
                            AccountId2 = "50501",
                            DrCr = "1",
                            TrxDetail = "DEBIT NOTES"
                        },
                        new
                        {
                            TrxId = "M",
                            AccountId1 = "60302",
                            AccountId2 = "50501",
                            DrCr = "2",
                            TrxDetail = "CREDIT NOTES"
                        },
                        new
                        {
                            TrxId = "J",
                            DrCr = "1",
                            TrxDetail = "Journal Voucher"
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.TypeMaster", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("TrxCd")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<int?>("ItemSr")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("TrxDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompCode", "AccYear", "TrxCd")
                        .HasName("PK_TypeMaster");

                    b.HasIndex("TrxCd");

                    b.ToTable("TypeMaster");

                    b.HasData(
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "A",
                            Prefix = "1920",
                            TrxDetail = "BANK RECEIPTS"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "B",
                            Prefix = "1920",
                            TrxDetail = "BANK PAYMENTS"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "C",
                            Prefix = "1920",
                            TrxDetail = "CASH PAYMENTS"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "D",
                            Prefix = "1920",
                            TrxDetail = "CASH RECEIPTS"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "S",
                            Prefix = "1920",
                            TrxDetail = "SALES"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "P",
                            Prefix = "1920",
                            TrxDetail = "PURCHASES"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "N",
                            Prefix = "1920",
                            TrxDetail = "DEBIT NOTES"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "M",
                            Prefix = "1920",
                            TrxDetail = "CREDIT NOTES"
                        },
                        new
                        {
                            CompCode = "01",
                            AccYear = "1920",
                            TrxCd = "J",
                            Prefix = "1920",
                            TrxDetail = "Journal Voucher"
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.UserInfo", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.Property<string>("CompCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("UserEmailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserSalt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName")
                        .HasName("PK_UserInfo");

                    b.ToTable("UserInfo");

                    b.HasData(
                        new
                        {
                            UserName = "rajesh",
                            CompCode = "01",
                            UserEmailId = "rajeshtalekar@gmail.com",
                            UserPassword = "RWt/KUFRqSKRBOKKJbZuPfwh9BKCqivii1hGSB3lOAs=",
                            UserSalt = "kcKeWjK5qUe/iUyl+5Hv8Q=="
                        },
                        new
                        {
                            UserName = "suyash",
                            CompCode = "01",
                            UserEmailId = "suyashtalekar@gmail.com",
                            UserPassword = "RWt/KUFRqSKRBOKKJbZuPfwh9BKCqivii1hGSB3lOAs=",
                            UserSalt = "kcKeWjK5qUe/iUyl+5Hv8Q=="
                        });
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.VoucherDetail", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("VouNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("ItemSr")
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("VouDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompCode", "AccYear", "VouNo", "ItemSr")
                        .HasName("PK_VoucherDetail");

                    b.HasIndex("CompCode", "AccYear", "AccountId");

                    b.ToTable("VoucherDetail");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.VoucherMaster", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("AccYear")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.Property<string>("VouNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("BilChq")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<string>("BillId")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("CgstAmount")
                        .HasColumnType("money");

                    b.Property<int?>("CgstId")
                        .HasColumnType("int");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("IgstAmount")
                        .HasColumnType("money");

                    b.Property<int?>("IgstId")
                        .HasColumnType("int");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("SgstAmount")
                        .HasColumnType("money");

                    b.Property<int?>("SgstId")
                        .HasColumnType("int");

                    b.Property<string>("TrxType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("VouAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("VouDate")
                        .HasColumnType("date");

                    b.Property<string>("VouDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompCode", "AccYear", "VouNo")
                        .HasName("PK_VoucherMaster");

                    b.HasIndex("CgstId");

                    b.HasIndex("IgstId");

                    b.HasIndex("SgstId");

                    b.HasIndex("CompCode", "AccYear", "AccountId");

                    b.HasIndex("CompCode", "AccYear", "BillId");

                    b.HasIndex("CompCode", "AccYear", "TrxType");

                    b.ToTable("VoucherMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.BillDetail", b =>
                {
                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.BillMaster", "BillMaster")
                        .WithMany("BillDetails")
                        .HasForeignKey("CompCode", "AccYear", "BillId")
                        .HasConstraintName("FK_BillDetail_BillMaster")
                        .IsRequired();

                    b.Navigation("BillMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.Ledger", b =>
                {
                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.VoucherMaster", "VoucherMaster")
                        .WithMany("Ledgers")
                        .HasForeignKey("CompCode", "AccYear", "VouNo")
                        .HasConstraintName("FK_Ledger_VoucherMaster")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.TypeMaster", b =>
                {
                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.TransactionMaster", "TrxCdNavigation")
                        .WithMany("TypeMasters")
                        .HasForeignKey("TrxCd")
                        .HasConstraintName("FK_TypeMaster_TransactionMaster")
                        .IsRequired();

                    b.Navigation("TrxCdNavigation");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.VoucherDetail", b =>
                {
                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.AccountMaster", "AccountMaster")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("CompCode", "AccYear", "AccountId")
                        .HasConstraintName("FK_VoucherDetail_AccountMaster")
                        .IsRequired();

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.VoucherMaster", "VoucherMaster")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("CompCode", "AccYear", "VouNo")
                        .HasConstraintName("FK_VoucherDetail_VoucherMaster")
                        .IsRequired();

                    b.Navigation("AccountMaster");

                    b.Navigation("VoucherMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.VoucherMaster", b =>
                {
                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.CgstMaster", "Cgst")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("CgstId")
                        .HasConstraintName("FK_VoucherMaster_CgstMaster");

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.IgstMaster", "Igst")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("IgstId")
                        .HasConstraintName("FK_VoucherMaster_IgstMaster");

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.SgstMaster", "Sgst")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("SgstId")
                        .HasConstraintName("FK_VoucherMaster_SgstMaster");

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.CompInfo", "CompInfo")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("CompCode", "AccYear")
                        .HasConstraintName("FK_VoucherMaster_CompInfo")
                        .IsRequired();

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.AccountMaster", "AccountMaster")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("CompCode", "AccYear", "AccountId")
                        .HasConstraintName("FK_VoucherMaster_AccountMaster")
                        .IsRequired();

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.BillMaster", "BillMaster")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("CompCode", "AccYear", "BillId")
                        .HasConstraintName("FK_VoucherMaster_BillMaster");

                    b.HasOne("SmartBase.BusinessLayer.Core.Domain.TypeMaster", "TypeMaster")
                        .WithMany("VoucherMasters")
                        .HasForeignKey("CompCode", "AccYear", "TrxType")
                        .HasConstraintName("FK_VoucherMaster_TypeMaster")
                        .IsRequired();

                    b.Navigation("AccountMaster");

                    b.Navigation("BillMaster");

                    b.Navigation("Cgst");

                    b.Navigation("CompInfo");

                    b.Navigation("Igst");

                    b.Navigation("Sgst");

                    b.Navigation("TypeMaster");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.AccountMaster", b =>
                {
                    b.Navigation("VoucherDetails");

                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.BillMaster", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.CgstMaster", b =>
                {
                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.CompInfo", b =>
                {
                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.IgstMaster", b =>
                {
                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.SgstMaster", b =>
                {
                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.TransactionMaster", b =>
                {
                    b.Navigation("TypeMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.TypeMaster", b =>
                {
                    b.Navigation("VoucherMasters");
                });

            modelBuilder.Entity("SmartBase.BusinessLayer.Core.Domain.VoucherMaster", b =>
                {
                    b.Navigation("Ledgers");

                    b.Navigation("VoucherDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
