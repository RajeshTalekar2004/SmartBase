<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartBase.BusinessLayer</name>
    </assembly>
    <members>
        <member name="T:SmartBase.BusinessLayer.Controllers.AccountMasterController">
            <summary>
            This controller is used for CRUD and paging for Account Master.
            </summary>   
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.IAccountMasterService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.AccountMasterController})">
            <summary>
            Initialize account master controller
            </summary>
            <param name="accountMasterService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Add new account Required CompCode+year+AccountId+Name
            </summary>
            <param name="newAccountMaster"></param>
            <returns></returns>
            <returns>An ActionResult of type AccountMaster</returns>
            <remarks>Sample request (this request Add the account **name**)  
            
            POST /AccountMaster/Add
            [ 
                {
                    "compCode": "01",
                    "accYear": "1920",
                    "accountId": "101022           ",
                    "name": "OPENING STOCK OF SILVER  Rajesh",
                    "opening": null,
                    "curDr": null,
                    "curCr": null,
                    "closing": null
                } 
            ] 
            </remarks>
            <response code="200">Returns the updated EYAppTypes</response>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.Delete(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Delete account CompCode+AccYear+AccountId is required
            </summary>
            <param name="delAccountMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Edit account. Required CompCode+year+AccountId+Name
            </summary>
            <param name="editAccountMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.GetAccountByCode(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            POST account by code. Required CompCode+year+AccountId
            </summary>
            <param name="editAccountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.SearchAccountByCode(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Post Search AccountID start with wild card search. CompCode+year+AccountId
            </summary>
            <param name="editAccountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.GetAccountByName(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Get Account by name using company code and year. CompCode+year+Name
            </summary>
            <param name="editAccountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.SearchAccountByName(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Search Account Name start with. Wild card search. Required CompCode+year+Name
            </summary>
            <param name="editAccountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.GetAll(SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Get all account by CompCode and year
            </summary>
            <param name="editAccountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.AccountMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.AccountMasterModel)">
            <summary>
            Get all Account by accountId,name
            </summary>
            <param name="pageParams"></param>
            <param name="accountMasterModel"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.BillDetailController">
            <summary>
            This controller is used for CRUD and paging for Bill Detail matching with voucher.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.Add(SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Add new bill detail record. CompId+AccYear+BillId+ItemSr required field
            </summary>
            <param name="newBillDetailModell"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.Delete(SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Delete bill detail record. CompId+AccYear+BillId+ItemSr required field
            </summary>
            <param name="billBillDetailMode"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.Edit(SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Edit bill detail record. CompId+AccYear+BillId+ItemSr required field
            </summary>
            <param name="editBillDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.GetAll(SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Get all records from Bill details. CompId+AccYear required field
            </summary>
            <param name="getBillMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Get bill detail with paging. Required =>CompCode+AccYear
            </summary>
            <param name="pageParams"></param>
            <param name="getBillDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillDetailController.GetBillId(SmartBase.BusinessLayer.Persistence.Models.BillDetailModel)">
            <summary>
            Get all bill detail records for selected Bill. CompId+AccYear+BillId required field
            </summary>
            <param name="billMasterId"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.BillMasterController">
            <summary>
            This controller is used for CRUD and paging for Bill Header matching
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.GetAll(SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Get Bill master list. CompCode + AccYear required field
            </summary>
            <param name="getBillMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Get all Bill master by paging. Required => CompCode+AccYear. Sort by billId,accountId,billDate
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.GetBillId(SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Get Bill master record. CompCode + AccYear + AccountId + BillId required field
            </summary>
            <param name="billMasterId"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Add new record CompCode+AccYear+BillId+AccountID is required field
            </summary>
            <param name="newBillMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Edit record CompCode+AccYear+BillId+AccountID is required field
            </summary>
            <param name="editBillMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.BillMasterController.Delete(SmartBase.BusinessLayer.Persistence.Models.BillMasterModel)">
            <summary>
            Delete record CompCode+AccYear+BillId+AccountID is required field
            </summary>
            <param name="billMasterModel"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.CgstMasterController">
            <summary>
            This controller is used for CRUD and paging for Central GST.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.ICgstMasterService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.CgstMasterController})">
            <summary>
            Initilize CGST account controller
            </summary>
            <param name="cstMasterService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.Get">
            <summary>
            Get all CGST Codes
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.CgstMasterModel)">
            <summary>
            Get all CGST order by cgstDetail,cgstRate,cgstId
            </summary>
            <param name="pageParams"></param>
            <param name="getCgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.GetCgstByCode(SmartBase.BusinessLayer.Persistence.Models.CgstMasterModel)">
            <summary>
            Get cgst id. Required => CgstId
            </summary>
            <param name="cgstModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.Delete(System.Int32)">
            <summary>
            Delete existing CGST code
            </summary>
            <param name="cgstId"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.CgstMasterModel)">
            <summary>
            Add new CGST code
            </summary>
            <param name="newCgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CgstMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.CgstMasterModel)">
            <summary>
            Edit existing CGST code
            </summary>
            <param name="editCgstMaster"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.CompanyController">
            <summary>
            This controller is used for CRUD and paging for Company information.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.ICompanyService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.CompanyController})">
            <summary>
            
            </summary>
            <param name="companyService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.Get">
            <summary>
            Get list of companies
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.CompanyModel)">
            <summary>
            Get all Company information by compCode,name
            </summary>
            <param name="pageParams"></param>
            <param name="getCompany"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.GetCompanyByCode(SmartBase.BusinessLayer.Persistence.Models.CompanyModel)">
            <summary>
            Get company by code. Required=>CompCode
            </summary>
            <param name="editCompany"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.Delete(System.String)">
            <summary>
            delte company. Required Company code 
            </summary>
            <param name="ByCode"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.Add(SmartBase.BusinessLayer.Persistence.Models.CompanyModel)">
            <summary>
            Add new company. Required =>CompCode,AccYear,Name
            </summary>
            <param name="newCompany"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.Edit(SmartBase.BusinessLayer.Persistence.Models.CompanyModel)">
            <summary>
            Edit Company. Required => CompCode+AccYear+Name 
            </summary>
            <param name="editCompany"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.CompanyController.NewYear(SmartBase.BusinessLayer.Persistence.Models.CompanyNewYearModel)">
            <summary>
            Create new year process. Required => CompCode+AccYear+NewYear
            </summary>
            <param name="newCompany"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.IgstMasterController">
            <summary>
            This controller is used for CRUD and paging for Inter State GST.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.Get">
            <summary>
            Get all IGST code
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.IgstMasterModel)">
            <summary>
            Get all Igst Codes by IgstId,IgstDetail,IgstRate
            </summary>
            <param name="pageParams"></param>
            <param name="getIgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.GetIgstByCode(SmartBase.BusinessLayer.Persistence.Models.IgstMasterModel)">
            <summary>
            Get IGST by Id
            </summary>
            <param name="editIgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.Delete(System.Int32)">
            <summary>
            Delete IGST Code
            </summary>
            <param name="igstId"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.IgstMasterModel)">
            <summary>
            Add new IGST code. Required => IgstId+IgstDetail
            </summary>
            <param name="newIgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.IgstMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.IgstMasterModel)">
            <summary>
            Edit IGST code. Required => IgstId+IgstDetail
            </summary>
            <param name="editIgstMaster"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.LedgerController">
            <summary>
            This controller is used for CRUD and paging for Ledger. This is not interacted by user.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.Add(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Add new ledger. CompCode+Accyear+VouNo+ItemSr required fields.
            </summary>
            <param name="newLedgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.Delete(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Delete ledger record. CompCode+Accyear+VouNo+ItemSr required fields.
            </summary>
            <param name="delLedgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.Edit(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Edit ledger record. CompCode+Accyear+VouNo+ItemSr required fields.
            </summary>
            <param name="editLedgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.GetAll(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Get all ledger records. CompCode+Accyear required fields.
            </summary>
            <param name="ledgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Get all ledger by vouNo,vouDate,accountId
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.GetByCode(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            Get all ledger records. CompCode+Accyear+AccountId required fields.
            </summary>
            <param name="editLedgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.Receate(SmartBase.BusinessLayer.Persistence.Models.LedgerModel)">
            <summary>
            This process will recreate ledger file from VoucherMaster+VoucherDetail
            </summary>
            <param name="newLedgerModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.GeneralLedger(SmartBase.BusinessLayer.Persistence.Models.ReportModel)">
            <summary>
            Generate ledger. Required => CompCode+AccYear+StartDate+StartAccount+FinishAccount
            </summary>
            <param name="reportModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.LedgerController.SaleRegister(SmartBase.BusinessLayer.Persistence.Models.ReportModel)">
            <summary>
            Generate Sales or Purchase Register. Required=>CompCode+AccYear+StartDate+SaleOrPurchaseType.
            SaleOrPurchaseType = 'P' for purchase register
            SaleOrPurchaseType = 'S' for sales register
            </summary>
            <param name="reportModel"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.SgstMasterController">
            <summary>
            This controller is used for CRUD and paging for State GST.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.ISgstMasterService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.SgstMasterController})">
            <summary>
            
            </summary>
            <param name="sgstService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.Get">
            <summary>
            Get all SGST code
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.SgstMasterModel)">
            <summary>
            Get all SGST by sgistId,sgstDetail,sgstRate
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.GetSgstByCode(SmartBase.BusinessLayer.Persistence.Models.SgstMasterModel)">
            <summary>
            Get SGST by Id. Required =>SgstId
            </summary>
            <param name="editSgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.Delete(System.Int32)">
            <summary>
            Delete SGST Code
            </summary>
            <param name="sgstId"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.SgstMasterModel)">
            <summary>
            Add new CGST code
            </summary>
            <param name="newSgstMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.SgstMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.SgstMasterModel)">
            <summary>
            
            </summary>
            <param name="editSgstMaster"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.TransactionMasterController">
            <summary>
            This controller is used for CRUD and paging. Contain information which accounts should be used in voucher header section
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.ITransactionMasterService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.TransactionMasterController})">
            <summary>
            
            </summary>
            <param name="transactionMasterService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.TransactionMasterModel)">
            <summary>
            Add new transaction type. TrxId+DrCr is required
            </summary>
            <param name="newTransactionMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.Delete(System.String)">
            <summary>
            Delete transaction type. TrxId is required
            </summary>
            <param name="trxId"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.TransactionMasterModel)">
            <summary>
            Edit transaction type. TrxId+DrCr is required
            </summary>
            <param name="editTransactionMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.GetAll">
            <summary>
            Get all transaction types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.TransactionMasterModel)">
            <summary>
            Get all TransactionMaster trxId
            </summary>
            <param name="pageParams"></param>
            <param name="getTransactionMaster"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TransactionMasterController.GetByCode(System.String)">
            <summary>
            Get transaction types by type.
            </summary>
            <param name="trxId"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.TypeMasterController">
            <summary>
            This controller is used for managing voucher Serial number
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.ITypeMasterService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.TransactionMasterController})">
            <summary>
            Initilize type controller
            </summary>
            <param name="typeMasterService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Add new type record. CompCode+AccYear+TrxCd required field
            </summary>
            <param name="newTypeMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.Delete(SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Delete Type record CompCode+AccYear+TrxCd required field
            </summary>
            <param name="delTypeMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Edit Type record CompCode+AccYear+TrxCd required field
            </summary>
            <param name="editTypeMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.GetAll(SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Get Type records CompCode+AccYear required field
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Get all TypeMaster by trdCd,trxDetail. Required => CompCode+AccYear
            </summary>
            <param name="pageParams"></param>
            <param name="getTypeMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.TypeMasterController.GetTypeByCode(SmartBase.BusinessLayer.Persistence.Models.TypeMasterModel)">
            <summary>
            Get Type by code. Required => CompCode+AccYear+TrxCd
            </summary>
            <param name="typeMasterModel"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.UserController">
            <summary>
            This controller use for user managemennt and token management.
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.#ctor(SmartBase.BusinessLayer.Services.Interfaces.IUserService,Microsoft.Extensions.Logging.ILogger{SmartBase.BusinessLayer.Controllers.TransactionMasterController})">
            <summary>
            Initiate user controller
            </summary>
            <param name="userService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.Get">
            <summary>
            Get all users
            </summary>
            <returns>List of users</returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Get all user info by userName, userEmailId. Required => CompCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.Login(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Get valid user by user name and password. Required UserName+UserPassword
            </summary>
            <param name="userinfo"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.RefreshToken(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Refresh token using valid token
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.GetUserByName(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Get user by user name. Required => UserName
            </summary>
            <param name="userinfo"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.Add(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Add new user. Required field CompCode+UserName+UserPassword
            </summary>
            <param name="newUsery"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.Edit(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
            Edit user. Required => CompCode+UserName+UserPassword
            </summary>
            <param name="editUser"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.UserController.Delete(SmartBase.BusinessLayer.Persistence.Models.UserInfoModel)">
            <summary>
             Delete user. Required UserName
            </summary>
            <param name="userinfo"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.VoucherDetailController">
            <summary>
            This controller is used for CRUD and paging for Voucher Detail. But it will never required user interaction
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.Add(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Add new voucher detail record CompCode+AccYear+VouNo+ItemSr required
            </summary>
            <param name="newVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.Delete(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Delete voucher detail record CompCode+AccYear+VouNo+ItemSr required
            </summary>
            <param name="delVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.Edit(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Edit voucher detail record CompCode+AccYear+VouNo+ItemSr required
            </summary>
            <param name="editVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.GetAll(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Get all Voucher Detail. CompCode+AccYear is required.
            </summary>
            <param name="editVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Get all Voucher Details by vouNo,accountId
            </summary>
            <param name="pageParams"></param>
            <param name="getVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.GetByVouNo(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Get all Voucher Detail. CompCode+AccYear+VouNo is required.
            </summary>
            <param name="getVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherDetailController.GetByVouNoItemSr(SmartBase.BusinessLayer.Persistence.Models.VoucherDetailModel)">
            <summary>
            Get all Voucher Detail. CompCode+AccYear+VouNo+ItemSr is required.
            </summary>
            <param name="getVoucherDetailModel"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.VoucherMasterController">
            <summary>
            This controller used for voucher entry CRUD / Paging
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.Add(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Add new voucher. Required CompCode+AccYear
            </summary>
            <param name="newVoucherMasterModel"></param>
            <returns></returns>
            <remarks>Sample request (this request Add voucherr **Bank Receipt**)  
            
            POST /VoucherMaster/Add
            [ 
                {
                    "compCode": "01",
                    "accYear": "1920",
                    "vouNo": "000011",
                    "vouDate": "04-05-2020",
                    "trxType": "A",
                    "bilChq": "1012",
                    "billId": null,
                    "accountId": "50301",
                    "drCr": "1",
                    "vouDetail": null,
                    "VouAmount":43143.00,
                    "netAmount": null,
                    "sgstId": null,
                    "sgstAmount": null,
                    "cgstId": null,
                    "cgstAmount": null,
                    "sortAccountBy": null,
                    "accountMaster": null,
                    "billMaster": null,
                    "cgst": null,
                    "compInfo": null,
                    "sgst": null,
                    "typeMaster": null,
                    "ledgers": [],
                    "voucherDetails": [
                        {
            	            "compCode": "01",
            	            "accYear": "1920",
            	            "vouNo": "000011",
            	            "itemSr": 1,
            	            "accountId": "316",
            	            "drCr": "2",
            	            "amount": 43143.00,
            	            "vouDetail": "OD PNL CHARGES REVERCE. AUG.19 TO JAN.20.",
            	            "sortAccountBy": null,
            	            "accountMaster": null
                        }
            	    ]
                } 
            ] 
            </remarks>
            <response code="200">Returns the Added Voucher</response>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.Delete(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Delete Voucher Master CompCode+AccYear+VouNo is required field
            </summary>
            <param name="delVoucherMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.Edit(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Edit Voucher Master CompCode+AccYear+VouNo is required field
            </summary>
            <param name="editVoucherMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.GetByTrxType(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Get Voucher Master CompCode+AccYear+TrxType is required field
            </summary>
            <param name="editVoucherMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.GetByVouNo(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
             Get Voucher Master CompCode+AccYear is required field
            </summary>
            <param name="getVoucherMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.GetAccountByTrxId(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Get account list by TrxCd. Required => CompCode+AccYear+TrxType
            </summary>
            <param name="getVoucherMasterModel"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.VoucherMasterController.GetAll(SmartBase.BusinessLayer.Persistence.PageParams,SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Get all Voucher Details by vouNo,accountId. Required =>CompCode+AccYear+TrxType
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartBase.BusinessLayer.Controllers.WeatherForecastController">
            <summary>
            This is test controller to validate IIS service is working
            </summary>
        </member>
        <member name="M:SmartBase.BusinessLayer.Controllers.WeatherForecastController.Get">
            <summary>
            This GET method return weather
            </summary>
            <returns>Array of weather forcast</returns>
        </member>
        <member name="M:SmartBase.BusinessLayer.Services.VoucherMasterService.Add(SmartBase.BusinessLayer.Persistence.Models.VoucherMasterModel)">
            <summary>
            Save voucher with detail
            </summary>
            <param name="newVoucherMasterModel"></param>
            <returns></returns>
        </member>
    </members>
</doc>
